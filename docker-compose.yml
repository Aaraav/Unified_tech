version: "3.8"

services:
  auth1:
    build:
      context: ./services/auth-service
    restart: always
    environment:
      - PORT=4001
    expose:
      - "4001"
    env_file:
      - .env 
    depends_on:
      - db
      - redis
    networks:
      - app

  auth2:
    build:
      context: ./services/auth-service
    restart: always
    environment:
      - PORT=4002
    env_file:
      - .env 
    expose:
      - "4002"
    depends_on:
      - db
      - redis
    networks:
      - app

  auth3:
    build:
      context: ./services/auth-service
    restart: always
    environment:
      - PORT=4003
    env_file:
      - .env 
    expose:
      - "4003"
    depends_on:
      - db
      - redis
    networks:
      - app

  auth4:
    build:
      context: ./services/auth-service
    restart: always
    environment:
      - PORT=4004
    env_file:
      - .env 
    expose:
      - "4004"
    depends_on:
      - db
      - redis
    networks:
      - app

  oauth:
    build:
      context: ./services/oauth-service
    restart: always
    ports:
      - "8003:8003"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - app

  token:
    build:
      context: ./services/token-service
    restart: always
    ports:
      - "5001:5001"
    depends_on:
      - redis
    networks:
      - app

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - auth1
      - auth2
      - auth3
      - auth4
    networks:
      - app

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: uni
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app

  # db:
  #   image: citusdata/citus:11.2
  #   container_name: db
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: uni
  #   command: >
  #     postgres -c shared_preload_libraries=citus
             
  #   depends_on:
  #     - worker1
  #     - worker2
  #   volumes:
  #     - ./init:/docker-entrypoint-initdb.d
  #     # - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
  #   networks:
  #     - app
  # db:
  #   image: citusdata/citus:11.2
  #   container_name: db
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: uni
  #   command: ["postgres", "-c", "shared_preload_libraries=citus"]
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data         # ✅ persistent volume
  #     # - ./init:/docker-entrypoint-initdb.d             # ✅ run init.sql on first start
  #   depends_on:
  #     - worker1
  #     - worker2
  #   networks:
  #     - app


  # worker1:
  #   image: citusdata/citus:11.2
  #   container_name: worker1
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: uni
  #   command: ["postgres", "-c", "shared_preload_libraries=citus"]
  #   networks:
  #     - app

  # worker2:
  #   image: citusdata/citus:11.2
  #   container_name: worker2
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: uni
  #   command: ["postgres", "-c", "shared_preload_libraries=citus"]
  #   networks:
  #     - app

      


  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    container_name: redis
    networks:
      - app

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - app

  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka # optional, but consistent
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - app


  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - app


volumes:
  postgres_data:

networks:
  app:
